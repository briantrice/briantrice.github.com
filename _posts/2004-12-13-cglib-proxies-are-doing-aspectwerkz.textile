--- 
wordpress_id: 30
layout: post
title: CGLIB with Native Support for AspectWerkz
wordpress_url: http://jonasboner.com/?p=30
---
<h1>
CGLIB with Native Support for AspectWerkz
</h1>
<h3>The idea</h3>
<p>
After implementing the <a href="">AW Proxy</a> extension to <a href="http://aspectwerkz.codehaus.org/">AspectWerkz</a> I figured, why not hook into the most widely used proxy implementation out there: <a href="http://cglib.sourceforge.net/">cglib</a> and let AspectWerkz weave in the aspects that are around just before the proxy is returned to the user.  
</p>

<h3>The solution</h3>
<p>
So, this is all that this <i>cglib</i> extension does: asks AspectWerkz if it has anything to say about the class that has just been proxied. If so, then let the AspectWerkz weaver do its job, e.g. weave in the aspects that are currently deployed (on the classpath), and when returns the proxy to the user. 
</p>

<p>
If no AspectWerkz aspects are found that has pointcuts that matches the class being proxied then nothing happens.
</p>

<p>
All that was needed to make this work was to add 30 lines of code to <b>one</b> single <i>cglib</i> class. 
</p>

<h3>How do I use it?</h3>
<p>
This means that all you need to do to make <b>any</b> <i>cglib</i> based applications, and there are many: <a href="http://geronimo.apache.org/">Geronimo</a>, <a href="https://dynaop.dev.java.net/">dynaop</a>, <a href="http://www.springframework.org/">Spring AOP</a>, <a href="http://www.hibernate.org/">Hibernate</a> etc., become "aspectwerkz-aware" is to <b>replace one single class</b> in the <tt>cglib.jar</tt> jar. 
</p>
<p>Or.</p>
<p>
If you can't or don't want to patch the <tt>cglib.jar</tt> jar, you can just put the class <b>before</b> the jar on the classpath.  

</p>


<h3>What is the impact on my existing code?</h3>
<p>
If no AspectWerkz aspects are found that has pointcuts that matches the class being proxied then nothing happens.
And if AspectWerkz is not available then the whole process is skipped. So basically, there is nothing to loose, it is pay as you go (or should I rather say: gain as you go ;-) ).
</p>

<h3>How do I get it?</h3>
<p>
The single file you need can be found in the AspectWerkz RC2 distribution, which you can find <a href="http://aspectwerkz.codehaus.org/releases.html">here</a>.  
</p>

<p>
The cglib extension is in the <tt>./src/cglib-ext</tt> dir (in the root of the AspectWerkz distribution). So step into this directory and type <tt>ant dist</tt> and it will compile the class and put it in a jar that is to be found in the <tt>./src/cglib-ext/target</tt>. This jar only contains one single class file (which you either put in the <tt>cglib.jar</tt> jar or make sure that it is before the jar on the classpath). 
</p>

<p>
In the <tt>./src/cglib-ext</tt> dir you also have a sample that you can run. This sample is just a sample taken from the <i>cglib</i> distribution, but it has a tracing aspect on the classpath, that is weaved into the proxy. You can run this test by invoking <tt>ant samples:trace</tt>. 
</p>

<p>
Enjoy.
</p>
