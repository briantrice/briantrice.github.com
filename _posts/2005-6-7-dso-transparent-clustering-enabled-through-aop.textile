--- 
wordpress_id: 37
layout: post
title: "DSO: transparent clustering enabled through AOP"
wordpress_url: http://jonasboner.com/?p=37
---
<h1>
DSO: transparent clustering enabled through AOP
</h1>
<a href="http://www.terracottatech.com/index.html">Terracotta</a> just recently launched a product (DSO) for clustering POJOs in a completely transparent way.  What I find interesting in this product is not mainly in the clustering and caching, but how they make use of AOP and loadtime weaving to make it completely transparent.  

This sounds a lot like techniques that we have been working on in <a href="http://aspectwerkz.codehaus.org/">AspectWerkz</a> last years, and I was not too surprised, although very happy, to learn that they are actually using AspectWerkz. It is really great to see some of the ideas that Alex and I have been working on being used in new and interesting ways and in real-world applications.

They seem to use techniques that are fairly similar to the <a href="http://docs.codehaus.org/display/AWARE/UnitOfWorkProtocol">Unit of Work aspect library</a> that I wrote for the AWare aspect library. Meaning: record field changes to object graphs within a transaction which can be committed/rolled back./etc. add specific methods that are defined declaratively.

However they have extended to this idea by adding semantics currently not available in AOP.  For example being able to pick out synchronized blocks.  This is a great idea, and when you think of it, it is in a way a hole in the current AOP implementations.  Currently you can for example pick out a call to a method that is declared as being synchronized and you can pick out calls to Thread:: notify()/notifyAll()/wait().  Meaning that being able to pick out synchronized blocks are the only missing piece left in order to completely control thread management and locking in Java. The actual bytecode modifications needed to make this work would be fairly simple, but capturing the correct semantics in a good language design would probably be a lot trickier.

All and all a very interesting product that shows the beauty of AOP and loadtime weaving in action, go and check it out.
