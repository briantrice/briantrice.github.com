--- 
wordpress_id: 10
layout: post
title: JBoss AOP is lacking a decent join point model
wordpress_url: http://jonasboner.com/?p=10
---
<h1>
JBoss AOP is lacking a decent join point model
</h1>
<p />
There has been a lot of talk about the JBoss AOP implementation (and its lack of performance) lately.

<p />
When looking at it you can see (as <a href="http://freeroller.net/page/rickard/20030618#test_of_jboss_aop_performance">Rickard</a> and many others already have pointed out) that it has soo many major flaws that it is impossible for it to perform anything but bad. 

<p />
Apart from this, one of the things that first hit me was that the implementation is completely lacking a  decent join point model (meaning some sort of "language" in which you can define which methods/fields etc. should be advised). They are simply advising *everything* and are then (at runtime) making the desicions if an advice should be invoked or not. This is really amazing, since the key to a good AOP framework lies in how expressive and rich the join point model is. Those that have used AOP for some time will agree on that it is not enough to pick out join points on class level only:
<pre>
 &lt;!-- from the JBoss tutorial --&gt;
 &lt;interceptor-pointcut class="com.acme.POJO.*"&gt;
       &lt;interceptors&gt;
         &lt;interceptor factory="jboss.security.SecurityFactory"/&gt;
         &lt;interceptor-ref name="Logging"/&gt;
       &lt;/interceptors&gt;
   &lt;/interceptor-pointcut&gt;
</pre>
but there is a need for a much more finegrained selection mechanism, or you will run into a scaling wall pretty quick. 

<p />
In my world I would like to (at least) be able to pick out join points based on:
<ul>
	<li>
		class pattern
        </li>
	<li>
		method pattern, including return type and parameter types
        </li>
	<li>
		field pattern, including field type
        </li>
	<li>
		a mechanism to combine these patterns in an expression (e.g. ((pc1 || pc2) && pc3) and similar)
        </li>
</ul>
(Of course <a href="http://aspectwerkz.codehaus.org/">AspectWerkz</a> supports all of these.)

<p />
I could not resist to implement and run the same performance tests that 
<a href="http://freeroller.net/page/rickard/20030618#test_of_jboss_aop_performance">Rickard</a> 
did for JBoss AOP. Here are the results using <a href="http://aspectwerkz.codehaus.org/">AspectWerkz</a> (running on my Pentium 4 2.54 Mhz box):

<ul>
	<li>
		overhead for non-advised method: 0.0 ms/call (since non-advised calls are not advised)
        </li>
	<li>
		overhead for advised method but no advice (advice removed): 0.0003 ms/call
        </li>
	<li>
		invoking a method with one advice that does nothing: 0.0005 ms/call
        </li>
	<li>
		invoking a method with a chain of ten advices that does nothing: 0.0024 ms/call
        </li>
	<li>
		overhead for a call to an introduced method: 0.0004 ms/call
        </li>
</ul>
