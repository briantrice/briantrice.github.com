--- 
wordpress_id: 32
layout: post
title: Interception Done Right
wordpress_url: http://jonasboner.com/?p=32
---
<h1>
Interception Done Right
</h1>
<p>
One of the new features in the <a href="http://aspectwerkz.codehaus.org/index.html">AspectWerkz 2</a> architecture is that it comes with a full-blown interception framework that allows per instance programmatic deployment with most of  the AOP semantics preserved. You can make use of this using both the regular load-time weaving or the AW Proxy (that I blogged about <a href="http://blogs.codehaus.org/people/jboner/archives/000914_awproxy_proxy_on_steroids.html">here</a>)
</p>

<p>
In short you will get: 
<br />
Per instance programmatic deployment for <i>before</i>, <i>around</i>, <i>after</i>, <i>after finally</i> and <i>after throwing</i> advice types for <i>call</i>, <i>execution</i>, <i>set</i> and <i>get</i> pointcuts as well as the expressiveness of the AspectWerkz' pointcut pattern language all wrapped up in a very simple and intuitive API.  
</p>

<p>
<pre>
    POJO pojo = new POJO();

    // adds tracing to all methods in the 'pojo' instance
    ((Advisable) pojo).aw$addAdvice(
        "* *.*(..)",
        new BeforeAdvice() {
            public Object invoke(JoinPoint jp) {
                System.out.println("Entering: " + jp.getSignature().toString());
            }
        }
    );
</pre>
</p>

<h3>The Advisable interface</h3>
<p>
From a users perspective pretty much all you need to know about is in the <tt>Advisable</tt> interface. This interface is added to all the classes that you want to do per instance runtime deployment at. This interface is added to your classes by the framework, but more on that later. 
</p>

<p>
The <tt>Advisable</tt> interface basically has two methods that are of interest to you:
<ul>
    <li>
    <tt>void aw_addAdvice(String memberPattern, Advice advice)</tt> - this methods allows you to add an <tt>Advice</tt> instance to the members specified by the <tt>memberPattern</tt> argument
    </li>
    <li>
    <tt>void aw_removeAdvice(String memberPattern, Class adviceClass)</tt> - this methods allows you to remove the last advice (that was added last) of the type specified in the <tt>adviceClass</tt> argument from from the list of aspects applied to the members specified by the <tt>memberPattern</tt> argument
    </li>
</ul>
The funny prefix <tt>aw_</tt> is just to minimize method clashes since these methods are added to your classes on-the-fly.
</p>

<h3>The different Advice interfaces</h3>
<p>
The intercept framework supports all main types of advice defined in AOP today:
<ul>
    <li>
    <tt>AroundAdvice</tt> - works like a regular interceptor and is invoked "around" or "instead-of" the target method invocation or field access/modification.
    <br />
    It has one method you need to implement which has the following signature:
    <br />
    <tt>Object invoke(JoinPoint jp)</tt>
    </li>
    <li>
    <tt>BeforeAdvice</tt> - is invoked before the actual member invocation
    <br />
    It has one method you need to implement which has the following signature:
    <br />
    <tt>Object invoke(JoinPoint jp)</tt>
    </li>
    <li>
    <tt>AfterAdvice</tt> - is invoked after the actual member invocation, is invoked both if the method returns normally or with an exception. E.g. can be seen as being invoked in the <tt>finally</tt> block.
    <br />
    jt has one method you need to implement which has the following signature:
    <br />
    <tt>Object invoke(JoinPoint jp)</tt>
    </li>
    <li>
    <tt>AfterReturning</tt> - is invoked after the actual method has returned normally 
    <br />
    It has one method you need to implement which has the following signature:
    <br />
    <tt>Object invoke(JoinPoint jp, Object returnValue)</tt>
    </li>
    <li>
    <tt>AfterThrowingAdvice</tt> - is invoked after the actual method has returned with an exception 
    <br />
    It has one method you need to implement which has the following signature:
    <br />
    <tt>Object invoke(JoinPoint jp, Throwable exception)</tt>
    </li>
</ul>
As you can see, all of these methods takes a <tt>JoinPoint</tt> instance as a parameter. This class contains f.e. contextual information bout the join point (member) we are executing before/after/around. Such as caller and callee instances and types, argument values and types etc. You can also see that some of the advice takes an optional parameter which provides direct access to the return value or the exception instance. 
</p>

<h3>Preparing your application</h3>
<p>
To make this work you finally need to tell AspectWerkz which classes you want to make "advisable" and to which extent. This is done in the <tt>META-INF/aop.xml</tt> deployment descriptor in which you have to make use of the <tt>&lt;advisable .../&gt;</tt> element. This element has two attributes:
<ul>
    <li>
    <tt>expresssion</tt> - here you specify the type pattern that picks out the classes that you want to make "advisable" and this is done by defining a <tt>within(&lt;TYPE PATTERN&gt;)</tt> pointcut expression 
    </li>

    <li>
    <tt>pointcut-type</tt> - here you defined which pointcut semantics you want the added advice to follow
    <br />
    Valid types are:
    <ul>
        <li>
        <tt>call</tt> - the advice added to a method will be invoked on the caller side of the method invocation (if you think client-server then it is executing on the client side)
        </li>
        <li>
        <tt>execution</tt> - the advice added to a method will be invoked on the execution side of the method invocation
        </li>
        <li>
        <tt>set</tt> - the advice added to a field will be invoked when a field is modified 
        </li>
        <li>
        <tt>get</tt> - the advice added to a field will be invoked when a field is accessed
        </li>
        <li>
        <tt>all</tt> - a combination of all the above pointcut types
        </li>
        Or any combination of these separated by a <i>|</i> character.
    </ul>
    </li>
</ul>
</p>

<p>
Example:
<pre>
    &lt;aspectwerkz&gt;
        &lt;system id="intercept-sample"&gt;
            &lt;advisable expression="within(my.application.domain.*)" pointcut-type="call|set|get"/&gt;
        &lt;/system&gt;
    &lt;/aspectwerkz&gt;
</pre>
</p>

<h3>Bringing it all together</h3>
<p>
So now we have talked about the <tt>Advisable</tt> interface that we can use to add the advice we want to a specific instance. We have talked about the different <tt>Advice</tt> interfaces and their differences. Finally we talked about how we tell the AspectWerkz container which classes it should make "advisable" and how it should treat them. Let's now try to bring it all together in a small example.
</p>

<p>
In this example we are taking a regular POJO and we are adding an advice that will be applied to all methods that are annotated with the annotation <tt>@OneWay</tt> and turn the otherwise synchronous invocations into ansynchronous invocations.  
<pre>
    ...

    POJO pojo = new POJO();

    ((Advisable) pojo).aw_addAdvice(
        "@OneWay * *.*(..)",
        new AroundAdvice() {
            private Executor m_threadPool = Executors.newCachedThreadPool();

            public Object invoke(JoinPoint jp) throws Throwable {
                m_threadPool.execute(
                    new Runnable() {
                        public void run() {
                            try {
                                // proceed with the invocation in a new thread
                                jp.proceed();
                            } catch (Throwable e) {
                                throw new RuntimeException(e);
                            }
                        }
                    }
                );
                return null;
            }
        }
    );

    ...
</pre>

The <tt>META-INF/aop.xml</tt> file looks like this:
<pre>
    &lt;aspectwerkz&gt;
        &lt;system id="intercept-sample"&gt;
            &lt;advisable expression="within(sample.intercept.POJO)" pointcut-type="call"/&gt;
        &lt;/system&gt;
    &lt;/aspectwerkz&gt;
</pre>
</p>

<h3>Resources</h3>
<p>
I have not written any specific sample application for this article but if you want you can look at and run the tests in the AspectWerkz distribution. You can download the distribution <a href="http://aspectwerkz.codehaus.org/releases.html">here</a>. The tests are in <tt>./src/test/test/intercept/*</tt> directory and you can run them (along with all the other tests) by invoking <tt>ant test</tt> when standing in the AspectWerkz distribution's root dir.
</p>
Enjoy
