--- 
wordpress_id: 110
layout: post
title: Need to Scale-Out Your Spring Application?
wordpress_url: http://jonasboner.com/2006/05/09/need-to-scale-out-your-spring-application/
---
<h1>
Need to Scale-Out Your Spring Application?
</h1>
If you do, then you should come to my JavaOne session about <a href="https://www28.cplan.com/javaone06_cv_124_1/sessions_catalog.jsp?ilc=124-1&ilg=english&isort=1&is=%3CISEARCH%3E&ip=yes&itrack=+&isession_type=+&isession_id=TS-3217&iabstract=&ispeaker=&ispk_company=">Transparently Clustered Spring -- A Runtime Solution for Javaâ„¢ Technology</a> and learn how to cluster your <a href="http://springframework.org/">Spring</a> application in minutes, with <strong>zero changes to application code</strong>. 

The session (TS-3217) will be held on Tuesday, 05/16/2006, 02:00 PM - 03:00 PM and has the following abstract:

<blockquote>How do you scale a Spring application beyond a single node? How can you guarantee high-availability, eliminate single points of failure, and make sure that you meet your customer SLAs?

Historically speaking, clustering an application is not easy: it takes a significant amount of time and usually requires you to rewrite parts of your application. It also usually perturbs your domain model and breaks object identity.

But does it have to be like that?

In this talk, Jonas BonÃ©r will walk you through how to cluster your Spring application, transparently and naturally, with no changes to your application code, using the Terracotta Spring Runtime.

The Terracotta Spring Runtime allows you to take an arbitrary Spring application, written for a single JVMâ„¢ machine, and cluster it to N nodes while preserving the exact same semantics.

For example:

â€¢ Life-cycle semantics and scope for Spring beans are preserved across the cluster - within the same logical ApplicationContext (singleton and session scoped beans).
â€¢ Spring's local event mechanism in the ApplicationContext is turned into high-performance asynchronous, distributed and reliable events (messages), but still local within the same logical ApplicationContext.
â€¢ Clustered beans can be exported using Spring JMX support, which guarantees a single point of management and coherent view of all the JMX data in the cluster.
â€¢ Spring WebFlow's web flows are transparently shared across the cluster.
â€¢ and more...

The session is backed up by several live demos. 
</blockquote>

See you there.
